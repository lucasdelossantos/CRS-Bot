name: Docker Tests

on:
  push:
    branches: [ main ]
    paths:
    - 'Dockerfile'
    - 'docker-compose.yml'
    - '.dockerignore'
    - 'requirements.txt'
    - 'setup.py'
    - '**.py'
  pull_request:
    branches: [ main ]
    paths:
    - 'Dockerfile'
    - 'docker-compose.yml'
    - '.dockerignore'
    - 'requirements.txt'
    - 'setup.py'
    - '**.py'
  workflow_dispatch:


jobs:
  docker-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: crs-bot:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Verify image security
      run: |
        # Check image runs as non-root
        USER_INFO=$(docker run --rm crs-bot:test id)
        if echo "$USER_INFO" | grep -q "uid=0"; then
          echo "Container is running as root!"
          exit 1
        fi

        # Check Python security settings
        ENV_CHECK=$(docker run --rm crs-bot:test env)
        if ! echo "$ENV_CHECK" | grep -q "PYTHONUNBUFFERED=1"; then
          echo "Missing PYTHONUNBUFFERED environment variable"
          exit 1
        fi
        if ! echo "$ENV_CHECK" | grep -q "PYTHON_HASHSEED=random"; then
          echo "Missing PYTHON_HASHSEED environment variable"
          exit 1
        fi

        # Check file permissions
        PERM_CHECK=$(docker run --rm crs-bot:test ls -la /app)
        if echo "$PERM_CHECK" | grep -q "^.....w...."; then
          echo "Application files are writable!"
          exit 1
        fi

        # Check data directory permissions
        DATA_PERM=$(docker run --rm crs-bot:test ls -la /app/data)
        if ! echo "$DATA_PERM" | grep -q "^drwxr-x---.*crsbot.*crsbot"; then
          echo "Data directory has incorrect permissions"
          echo "$DATA_PERM"
          exit 1
        fi

        # Check for sensitive files
        if docker run --rm crs-bot:test find /app -type f -name "*.key" -o -name "*.pem" -o -name "*.env" 2>/dev/null; then
          echo "Found sensitive files in the container!"
          exit 1
        fi

        # Check for setuid/setgid binaries
        if docker run --rm crs-bot:test find / -perm /6000 -type f 2>/dev/null; then
          echo "Found setuid/setgid binaries!"
          exit 1
        fi

    - name: Run tests in container
      run: |
        # Create test directories with proper permissions
        mkdir -p tests/data
        chmod 750 tests/data
        chown 10001:10001 tests/data

        # Run tests with coverage
        docker run --rm \
          -v ${{ github.workspace }}/tests:/app/tests:ro \
          --user crsbot \
          crs-bot:test \
          pytest tests/ --cov=. --cov-report=xml

    - name: Test container startup and functionality
      run: |
        # Create data directory with proper permissions
        mkdir -p data
        chmod 750 data
        chown 10001:10001 data

        # Create test environment file
        cat > .env << EOL
        DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/test
        PYTHONUNBUFFERED=1
        EOL
        chmod 640 .env

        # Start container
        docker compose up -d

        # Wait for container to be healthy
        timeout 30s bash -c 'while ! docker compose ps | grep -q "healthy"; do sleep 1; done'

        # Verify container state
        CONTAINER_INFO=$(docker compose ps -q crs-bot | xargs docker inspect -f '{{.State.Status}} {{.State.Health.Status}}')
        if ! echo "$CONTAINER_INFO" | grep -q "running healthy"; then
          echo "Container is not running or not healthy"
          docker compose logs
          exit 1
        fi

        # Check volume permissions
        VOLUME_PERMS=$(docker compose exec -T crs-bot ls -la /app/data)
        if ! echo "$VOLUME_PERMS" | grep -q "drwxr-x---.*crsbot.*crsbot"; then
          echo "Data directory has incorrect permissions"
          echo "$VOLUME_PERMS"
          exit 1
        fi

        # Check logs for expected startup
        timeout 10s bash -c 'until docker compose logs | grep -q "Starting new release check"; do sleep 1; done'

        # Verify error handling
        if ! docker compose logs | grep -q "HTTP error sending Discord message"; then
          echo "Container did not properly handle invalid webhook URL"
          docker compose logs
          exit 1
        fi

        # Test health check
        HEALTH_STATUS=$(docker compose ps -q crs-bot | xargs docker inspect -f '{{.State.Health.Status}}')
        if [ "$HEALTH_STATUS" != "healthy" ]; then
          echo "Health check failed"
          docker compose logs
          exit 1
        fi

        # Cleanup
        docker compose down -v

    - name: Run security scan
      uses: docker/scout-action@v1
      with:
        command: cves
        image: crs-bot:test
        only-fixed: true
        exit-code: true
