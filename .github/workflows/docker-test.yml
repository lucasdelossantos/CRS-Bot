name: Docker Tests

on:
  push:
    branches: [ main ]
    paths:
    - 'Dockerfile'
    - 'docker-compose.yml'
    - '.dockerignore'
    - 'requirements.txt'
    - 'setup.py'
    - '**.py'
    - '.github/workflows/docker-test.yml'
  pull_request:
    branches: [ main ]
    paths:
    - 'Dockerfile'
    - 'docker-compose.yml'
    - '.dockerignore'
    - 'requirements.txt'
    - 'setup.py'
    - '**.py'
    - '.github/workflows/docker-test.yml'
  workflow_dispatch:


jobs:
  docker-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: crs-bot:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Verify image security
      run: |
        echo "🔍 Checking container user context..."
        USER_INFO=$(docker run --rm crs-bot:test id)
        echo "User Info: $USER_INFO"
        if echo "$USER_INFO" | grep -q "uid=0"; then
          echo "❌ Container is running as root!"
          exit 1
        fi
        echo "✅ Container is running as non-root user"

        echo "🔍 Checking Python security settings..."
        ENV_CHECK=$(docker run --rm crs-bot:test env)
        echo "Environment variables:"
        echo "$ENV_CHECK"
        if ! echo "$ENV_CHECK" | grep -q "PYTHONUNBUFFERED=1"; then
          echo "❌ Missing PYTHONUNBUFFERED environment variable"
          exit 1
        fi
        if ! echo "$ENV_CHECK" | grep -q "PYTHON_HASHSEED=random"; then
          echo "❌ Missing PYTHON_HASHSEED environment variable"
          exit 1
        fi
        echo "✅ Python security settings are correct"

        echo "🔍 Checking file permissions..."
        echo "Application directory permissions:"
        docker run --rm crs-bot:test ls -la /app
        PERM_CHECK=$(docker run --rm crs-bot:test ls -la /app)
        if echo "$PERM_CHECK" | grep -q "^.....w...."; then
          echo "❌ Application files are writable!"
          exit 1
        fi
        echo "✅ Application files are read-only"

        echo "🔍 Checking file ownership..."
        echo "File ownership details:"
        docker run --rm crs-bot:test stat /app/github_release.py
        docker run --rm crs-bot:test stat /app/config.yaml
        docker run --rm crs-bot:test stat /app/setup.py
        docker run --rm crs-bot:test stat /app/requirements.txt

        echo "🔍 Checking data directory permissions..."
        echo "Data directory details:"
        docker run --rm crs-bot:test ls -la /app/data
        DATA_PERM=$(docker run --rm crs-bot:test ls -la /app/data)
        if ! echo "$DATA_PERM" | grep -q "^dr-xr-x---.*root.*crsbot"; then
          echo "❌ Data directory has incorrect permissions or ownership"
          echo "Expected: dr-xr-x--- root crsbot"
          echo "Got: $DATA_PERM"
          exit 1
        fi
        echo "✅ Data directory permissions are correct"

        echo "🔍 Checking for sensitive files..."
        SENSITIVE_FILES=$(docker run --rm crs-bot:test find /app -type f -name "*.key" -o -name "*.pem" -o -name "*.env" 2>/dev/null)
        if [ ! -z "$SENSITIVE_FILES" ]; then
          echo "❌ Found sensitive files in the container:"
          echo "$SENSITIVE_FILES"
          exit 1
        fi
        echo "✅ No sensitive files found"

        echo "🔍 Checking for setuid/setgid binaries..."
        echo "Searching for files with setuid/setgid bits..."
        SETUID_FILES=$(docker run --rm crs-bot:test find / -perm /6000 -type f 2>/dev/null || true)
        if [ ! -z "$SETUID_FILES" ]; then
          echo "❌ Found setuid/setgid binaries:"
          echo "$SETUID_FILES"
          echo "Details of found files:"
          for file in $SETUID_FILES; do
            echo "File: $file"
            docker run --rm crs-bot:test ls -l "$file"
            docker run --rm crs-bot:test stat "$file"
          done
          exit 1
        fi
        echo "✅ No setuid/setgid binaries found"

        echo "✅ All security checks passed!"

    - name: Run tests in container
      run: |
        echo "📁 Creating test directories..."
        mkdir -p tests/data
        sudo chmod 550 tests/data
        sudo chown root:10001 tests/data
        # Create coverage directory with write permissions for crsbot
        mkdir -p tests/coverage
        sudo chown 10001:10001 tests/coverage
        sudo chmod 700 tests/coverage
        # Create pytest cache directory
        mkdir -p tests/pytest_cache
        sudo chown 10001:10001 tests/pytest_cache
        sudo chmod 700 tests/pytest_cache
        # Create data directory and files for tests
        sudo mkdir -p data
        sudo chown root:10001 data
        sudo chmod 550 data
        # Create and set up log file
        sudo touch data/github_release_bot.log
        sudo chown 10001:10001 data/github_release_bot.log
        sudo chmod 600 data/github_release_bot.log
        # Create and set up version file
        echo '{}' | sudo tee data/last_version.json > /dev/null
        sudo chown 10001:10001 data/last_version.json
        sudo chmod 600 data/last_version.json
        echo "✅ Test directories and files created with correct permissions"

        # Set permissions for source files
        sudo chown root:10001 github_release.py setup.py config.yaml
        sudo chmod 554 github_release.py setup.py
        sudo chmod 440 config.yaml
        echo "✅ Test directories created with correct permissions"

        echo "🧪 Running tests with coverage..."
        docker run --rm \
          -v ${{ github.workspace }}/tests:/app/tests:ro \
          -v ${{ github.workspace }}/github_release.py:/app/github_release.py:ro \
          -v ${{ github.workspace }}/setup.py:/app/setup.py:ro \
          -v ${{ github.workspace }}/config.yaml:/app/config.yaml:ro \
          -v ${{ github.workspace }}/data:/app/data:rw \
          -v ${{ github.workspace }}/tests/coverage:/coverage:rw \
          -v ${{ github.workspace }}/tests/pytest_cache:/app/.pytest_cache:rw \
          -e COVERAGE_FILE=/coverage/.coverage \
          --user crsbot \
          crs-bot:test \
          pytest tests/ --cov=. --cov-report=xml:/coverage/coverage.xml -v

    - name: Test container startup and functionality
      run: |
        echo "📁 Creating data directory..."
        # Create a temporary directory to initialize the volume
        sudo mkdir -p temp_data
        sudo chown root:10001 temp_data
        sudo chmod 550 temp_data
        # Create and set up log file
        sudo touch temp_data/github_release_bot.log
        sudo chown 10001:10001 temp_data/github_release_bot.log
        sudo chmod 600 temp_data/github_release_bot.log
        # Create and set up version file
        echo '{}' | sudo tee temp_data/last_version.json > /dev/null
        sudo chown 10001:10001 temp_data/last_version.json
        sudo chmod 600 temp_data/last_version.json
        echo "✅ Data directory created with correct permissions"

        echo "📝 Creating test environment file..."
        cat > .env << EOL
        DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/test
        PYTHONUNBUFFERED=1
        EOL
        chmod 640 .env
        echo "✅ Environment file created"

        echo "🚀 Starting container..."
        # Create Docker volume explicitly
        echo "Creating Docker volume..."
        docker volume create data
        docker volume inspect data

        # Debug source directory
        echo "Source directory contents before Docker:"
        sudo ls -la temp_data
        sudo stat temp_data/github_release_bot.log
        sudo stat temp_data/last_version.json

        # Initialize the named volume with our temporary directory
        echo "Initializing volume with data..."
        docker run --rm \
          -v "$(pwd)/temp_data:/source:ro" \
          -v "data:/target" \
          --user root \
          alpine sh -c 'set -x && \
          echo "Source directory contents:" && \
          ls -la /source && \
          echo "Source file details:" && \
          stat /source/github_release_bot.log && \
          stat /source/last_version.json && \
          echo "Cleaning target..." && \
          rm -rf /target/* && \
          mkdir -p /target && \
          echo "Target directory created:" && \
          ls -la /target && \
          echo "Copying files..." && \
          cp -av /source/github_release_bot.log /target/ && \
          cp -av /source/last_version.json /target/ && \
          echo "Target directory after copy:" && \
          ls -la /target && \
          echo "Setting ownership and permissions..." && \
          # Use numeric IDs to ensure consistency
          chown -R 0:10001 /target && \
          chmod 550 /target && \
          chown 10001:10001 /target/github_release_bot.log && \
          chown 10001:10001 /target/last_version.json && \
          chmod 600 /target/github_release_bot.log && \
          chmod 600 /target/last_version.json && \
          echo "Final volume contents and permissions:" && \
          ls -la /target && \
          echo "Log file details:" && \
          stat /target/github_release_bot.log && \
          echo "Version file details:" && \
          stat /target/last_version.json'

        # Verify volume contents and permissions after initialization
        echo "Verifying volume contents and permissions after initialization..."
        docker run --rm -v data:/verify --user root alpine sh -c 'ls -lan /verify && stat /verify/github_release_bot.log && stat /verify/last_version.json'

        # Start the container with explicit volume mount
        echo "Stopping any existing containers..."
        docker compose down

        echo "Starting container with volume..."
        docker compose up -d

        # Wait a moment for the container to mount volumes and check initial logs
        echo "Waiting for container to start and checking logs..."
        sleep 5
        docker compose logs

        # Verify permissions after container start
        echo "🔍 Verifying container permissions..."
        for i in {1..5}; do
          if docker compose exec -T crs-bot sh -c 'set -x && \
            echo "Data directory contents:" && \
            ls -lan /app/data && \
            echo "Log file details:" && \
            stat /app/data/github_release_bot.log && \
            echo "Version file details:" && \
            stat /app/data/last_version.json'; then
            break
          fi
          echo "Container not ready, waiting 5 seconds..."
          docker compose logs
          sleep 5
        done

        # Clean up temporary directory
        sudo rm -rf temp_data

        echo "⏳ Waiting for container health check..."
        HEALTHY=0
        for i in {1..30}; do
          if docker compose ps | grep -q "healthy"; then
            HEALTHY=1
            break
          fi
          echo "Waiting for container to be healthy..."
          docker compose ps
          docker compose logs --tail 50
          sleep 2
        done

        if [ $HEALTHY -eq 0 ]; then
          echo "❌ Container failed to become healthy. Container logs:"
          docker compose logs
          docker compose ps
          exit 1
        fi

        echo "🔍 Verifying container state..."
        CONTAINER_INFO=$(docker compose ps -q crs-bot | xargs docker inspect -f '{{.State.Status}} {{.State.Health.Status}}')
        echo "Container state: $CONTAINER_INFO"
        if ! echo "$CONTAINER_INFO" | grep -q "running healthy"; then
          echo "❌ Container is not running or not healthy"
          echo "Container logs:"
          docker compose logs
          exit 1
        fi
        echo "✅ Container is running and healthy"

        echo "🔍 Checking volume permissions..."
        echo "Volume permissions:"
        VOLUME_PERMS=$(docker compose exec -T crs-bot ls -la /app/data)
        echo "$VOLUME_PERMS"
        if ! echo "$VOLUME_PERMS" | grep -q "^dr-xr-x---.*root.*crsbot"; then
          echo "❌ Data directory has incorrect permissions or ownership"
          echo "Expected: dr-xr-x--- root crsbot"
          echo "Got: $VOLUME_PERMS"
          exit 1
        fi
        echo "✅ Volume permissions are correct"

        echo "📋 Checking startup logs..."
        timeout 10s bash -c 'until docker compose logs | grep -q "Starting new release check"; do 
          echo "Waiting for startup message...";
          sleep 1; 
        done'
        echo "✅ Application started successfully"

        echo "✅ All container tests passed!"

    - name: Run security scan
      uses: docker/scout-action@v1
      with:
        command: cves
        image: crs-bot:test
        only-fixed: true
        exit-code: true
