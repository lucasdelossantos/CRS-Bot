name: Manual Dependabot
on:
  workflow_dispatch:


jobs:
  dependabot:
    name: 'Dependabot'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
    steps:
    - name: Install GitHub CLI
      run: |
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y

    - name: Trigger Dependabot
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          /repos/${{ github.repository }}/dispatches \
          -f event_type='dependency-update'

    - name: Wait for a moment
      run: sleep 30

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}
        fetch-depth: 0

    - name: Check and merge PRs
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        # Configure git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

        # List all open PRs with dependency labels or from dependabot
        gh pr list --json number,author,labels,title,headRefName,baseRefName --jq '.[] | select((.author.login == "dependabot[bot]") or (.labels | map(.name) | contains(["dependencies"])))' | while read -r pr_json; do
          pr_number=$(echo "$pr_json" | jq -r '.number')
          head_branch=$(echo "$pr_json" | jq -r '.headRefName')
          base_branch=$(echo "$pr_json" | jq -r '.baseRefName')
          
          if [ ! -z "$pr_number" ]; then
            echo "Processing PR #$pr_number ($head_branch)"
            
            # Force fetch the latest state
            git fetch --force origin "$base_branch:$base_branch"
            git fetch --force origin "$head_branch:$head_branch" || true
            
            # Create a new temporary branch from base
            temp_branch="temp-${head_branch}"
            git checkout -B "$temp_branch" "origin/$base_branch"
            
            # Cherry-pick the PR's changes
            pr_commit=$(gh pr view "$pr_number" --json commits --jq '.commits[-1].oid')
            if git cherry-pick "$pr_commit"; then
              # Force push the updated branch
              git push --force origin "HEAD:$head_branch"
              
              echo "Branch updated, waiting for checks to start..."
              sleep 15
              
              # Re-run all check suites for the PR
              echo "Re-running all checks for PR #$pr_number..."
              gh api "/repos/${{ github.repository }}/pulls/$pr_number" --jq '.head.sha' | while read -r sha; do
                gh api -X POST "/repos/${{ github.repository }}/check-runs" \
                  -F "name=re-run-trigger" \
                  -F "head_sha=$sha" \
                  -F "status=completed" \
                  -F "conclusion=success" || true
                
                # Trigger check suite re-run
                gh api -X POST "/repos/${{ github.repository }}/check-suites" \
                  -F "head_sha=$sha" || true
              done
              
              echo "Waiting for checks to complete..."
              sleep 180  # Give checks more time to run
              
              echo "Enabling auto-merge for PR #$pr_number"
              gh pr merge "$pr_number" --auto --merge || true
            else
              echo "Failed to apply changes for PR #$pr_number, skipping"
            fi
            
            # Clean up temporary branch
            git checkout main
            git branch -D "$temp_branch" || true
          fi
        done
