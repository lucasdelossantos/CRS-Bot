# Tests workflow
# Runs tests across multiple Python versions and uploads coverage reports

name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:


jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.9', '3.10', '3.11', '3.12', '3.13' ]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Create data directory
      run: |
        mkdir -p data
        chmod 700 data

    - name: Run security checks
      run: |
        # Run Bandit security checks
        bandit -r . -ll -ii -x tests/

        # Check for known vulnerabilities in dependencies
        safety check

    - name: Run tests with coverage
      env:
        PYTHONUNBUFFERED: "1"
        PYTHON_HASHSEED: "random"
        DISCORD_WEBHOOK_URL: "https://discord.com/api/webhooks/test"
      run: |
        # Run tests with coverage
        pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing

        # Verify minimum coverage
        coverage report --fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false # Don't fail if coverage upload fails

    - name: Verify file permissions
      run: |
        # Check data directory permissions
        if [ "$(stat -c %a data)" != "700" ]; then
          echo "Data directory has incorrect permissions"
          exit 1
        fi

        # Check log file permissions
        touch data/github_release_bot.log
        if [ "$(stat -c %a data/github_release_bot.log)" != "600" ]; then
          echo "Log file has incorrect permissions"
          exit 1
        fi

        # Check version file permissions
        echo "{}" > data/last_version.json
        if [ "$(stat -c %a data/last_version.json)" != "600" ]; then
          echo "Version file has incorrect permissions"
          exit 1
        fi
