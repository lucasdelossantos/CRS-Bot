# Tests workflow
# Runs tests across multiple Python versions and uploads coverage reports

name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:


jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.9', '3.10', '3.11', '3.12', '3.13' ]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Create data directory
      run: |
        mkdir -p data
        chmod 700 data

    - name: Run security checks
      run: |
        echo "Running Bandit security checks..."
        # Run Bandit security checks with detailed output
        bandit -r . -ll -ii -x tests/ -v

        echo "Checking for known vulnerabilities..."
        # Check for known vulnerabilities in dependencies with full output
        safety check --full-report

    - name: Run tests with coverage
      env:
        PYTHONUNBUFFERED: "1"
        PYTHON_HASHSEED: "random"
        DISCORD_WEBHOOK_URL: "https://discord.com/api/webhooks/test"
      run: |
        echo "Running pytest with coverage..."
        # Run tests with coverage and more verbose output
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing

        echo "Verifying coverage threshold..."
        # Verify minimum coverage with detailed report
        coverage report -m --fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        fail_ci_if_error: false # Don't fail if coverage upload fails

    - name: Verify file permissions
      run: |
        echo "Checking data directory permissions..."
        # Show current permissions
        ls -la data/
        stat data/
        DATA_PERMS=$(stat -c %a data)
        echo "Data directory permissions: $DATA_PERMS (expected 700)"
        if [ "$DATA_PERMS" != "700" ]; then
          echo "❌ Data directory has incorrect permissions: $DATA_PERMS (expected 700)"
          exit 1
        fi

        echo "Checking log file permissions..."
        touch data/github_release_bot.log
        chmod 600 data/github_release_bot.log
        # Show current permissions
        ls -la data/github_release_bot.log
        stat data/github_release_bot.log
        LOG_PERMS=$(stat -c %a data/github_release_bot.log)
        echo "Log file permissions: $LOG_PERMS (expected 600)"
        if [ "$LOG_PERMS" != "600" ]; then
          echo "❌ Log file has incorrect permissions: $LOG_PERMS (expected 600)"
          exit 1
        fi

        echo "Checking version file permissions..."
        echo "{}" > data/last_version.json
        chmod 600 data/last_version.json
        # Show current permissions
        ls -la data/last_version.json
        stat data/last_version.json
        VERSION_PERMS=$(stat -c %a data/last_version.json)
        echo "Version file permissions: $VERSION_PERMS (expected 600)"
        if [ "$VERSION_PERMS" != "600" ]; then
          echo "❌ Version file has incorrect permissions: $VERSION_PERMS (expected 600)"
          exit 1
        fi

        echo "✅ All file permissions are correct"
